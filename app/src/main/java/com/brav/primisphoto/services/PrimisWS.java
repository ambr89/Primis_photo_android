package com.brav.primisphoto.services;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 10/27/2017 1:25:58 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.AsyncTask;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import java.util.List;

public class PrimisWS {
    
    public String NAMESPACE ="http://primis.bravservices.it/";
    public String url="";
    public int timeOut = 90000;
    public IWsdl2CodeEvents eventHandler;
    public WS_Enums.SoapProtocolVersion soapVersion;
    
    public PrimisWS(){}
    
    public PrimisWS(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public PrimisWS(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public PrimisWS(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void GetFileAsync(String deviceId,String relFileName) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFileAsync(deviceId, relFileName, null);
    }
    
    public void GetFileAsync(final String deviceId,final String relFileName,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorByte>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorByte doInBackground(Void... params) {
                return GetFile(deviceId, relFileName, headers);
            }
            @Override
            protected void onPostExecute(VectorByte result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFile", result);
                }
            }
        }.execute();
    }
    
    public VectorByte GetFile(String deviceId,String relFileName){
        return GetFile(deviceId, relFileName, null);
    }
    
    public VectorByte GetFile(String deviceId,String relFileName,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","GetFile");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("RelFileName",relFileName);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/GetFile", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/GetFile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapPrimitive j = (SoapPrimitive)obj;
                    VectorByte resultVariable = new VectorByte(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetDocFileNamesAsync(String deviceId,String lastSyncDoc) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetDocFileNamesAsync(deviceId, lastSyncDoc, null);
    }
    
    public void GetDocFileNamesAsync(final String deviceId,final String lastSyncDoc,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorString>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorString doInBackground(Void... params) {
                return GetDocFileNames(deviceId, lastSyncDoc, headers);
            }
            @Override
            protected void onPostExecute(VectorString result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetDocFileNames", result);
                }
            }
        }.execute();
    }
    
    public VectorString GetDocFileNames(String deviceId,String lastSyncDoc){
        return GetDocFileNames(deviceId, lastSyncDoc, null);
    }
    
    public VectorString GetDocFileNames(String deviceId,String lastSyncDoc,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","GetDocFileNames");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("LastSyncDoc",lastSyncDoc);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/GetDocFileNames", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/GetDocFileNames", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorString resultVariable = new VectorString(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetSwFileNamesAsync(String deviceId,String lastSyncSw) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSwFileNamesAsync(deviceId, lastSyncSw, null);
    }
    
    public void GetSwFileNamesAsync(final String deviceId,final String lastSyncSw,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorString>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorString doInBackground(Void... params) {
                return GetSwFileNames(deviceId, lastSyncSw, headers);
            }
            @Override
            protected void onPostExecute(VectorString result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSwFileNames", result);
                }
            }
        }.execute();
    }
    
    public VectorString GetSwFileNames(String deviceId,String lastSyncSw){
        return GetSwFileNames(deviceId, lastSyncSw, null);
    }
    
    public VectorString GetSwFileNames(String deviceId,String lastSyncSw,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","GetSwFileNames");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("LastSyncSw",lastSyncSw);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/GetSwFileNames", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/GetSwFileNames", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorString resultVariable = new VectorString(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void SavePicsAsync(String deviceId,String picName,String picType,int anno,VectorByte myPic) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SavePicsAsync(deviceId, picName, picType, anno, myPic, null);
    }
    
    public void SavePicsAsync(final String deviceId,final String picName,final String picType,final int anno,final VectorByte myPic,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return SavePics(deviceId, picName, picType, anno, myPic, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SavePics", result);
                }
            }
        }.execute();
    }
    
    public boolean SavePics(String deviceId,String picName,String picType,int anno,VectorByte myPic){
        return SavePics(deviceId, picName, picType, anno, myPic, null);
    }
    
    public boolean SavePics(String deviceId,String picName,String picType,int anno,VectorByte myPic,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","SavePics");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("PicName",picName);
        soapReq.addProperty("PicType",picType);
        soapReq.addProperty("anno",anno);
        soapReq.addProperty("MyPic",myPic.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/SavePics", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/SavePics", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void SaveLogAsync(String deviceId,String log) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveLogAsync(deviceId, log, null);
    }
    
    public void SaveLogAsync(final String deviceId,final String log,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return SaveLog(deviceId, log, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SaveLog", result);
                }
            }
        }.execute();
    }
    
    public boolean SaveLog(String deviceId,String log){
        return SaveLog(deviceId, log, null);
    }
    
    public boolean SaveLog(String deviceId,String log,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","SaveLog");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("Log",log);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/SaveLog", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/SaveLog", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void TestComAsync(String deviceId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TestComAsync(deviceId, null);
    }
    
    public void TestComAsync(final String deviceId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return TestCom(deviceId, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("TestCom", result);
                }
            }
        }.execute();
    }
    
    public boolean TestCom(String deviceId){
        return TestCom(deviceId, null);
    }
    
    public boolean TestCom(String deviceId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","TestCom");
        soapReq.addProperty("DeviceId",deviceId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/TestCom", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/TestCom", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void CercaSchedaAsync(String deviceId,String numeroScheda,String senderEmail) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CercaSchedaAsync(deviceId, numeroScheda, senderEmail, null);
    }
    
    public void CercaSchedaAsync(final String deviceId,final String numeroScheda,final String senderEmail,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return CercaScheda(deviceId, numeroScheda, senderEmail, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CercaScheda", result);
                }
            }
        }.execute();
    }
    
    public boolean CercaScheda(String deviceId,String numeroScheda,String senderEmail){
        return CercaScheda(deviceId, numeroScheda, senderEmail, null);
    }
    
    public boolean CercaScheda(String deviceId,String numeroScheda,String senderEmail,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","CercaScheda");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("NumeroScheda",numeroScheda);
        soapReq.addProperty("SenderEmail",senderEmail);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/CercaScheda", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/CercaScheda", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void UploadAllegatoSchedaAsync(String deviceId,String numeroScheda,String senderEmail,String nomeAllegato,VectorByte allegato) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UploadAllegatoSchedaAsync(deviceId, numeroScheda, senderEmail, nomeAllegato, allegato, null);
    }
    
    public void UploadAllegatoSchedaAsync(final String deviceId,final String numeroScheda,final String senderEmail,final String nomeAllegato,final VectorByte allegato,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return UploadAllegatoScheda(deviceId, numeroScheda, senderEmail, nomeAllegato, allegato, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UploadAllegatoScheda", result);
                }
            }
        }.execute();
    }
    
    public boolean UploadAllegatoScheda(String deviceId,String numeroScheda,String senderEmail,String nomeAllegato,VectorByte allegato){
        return UploadAllegatoScheda(deviceId, numeroScheda, senderEmail, nomeAllegato, allegato, null);
    }
    
    public boolean UploadAllegatoScheda(String deviceId,String numeroScheda,String senderEmail,String nomeAllegato,VectorByte allegato,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","UploadAllegatoScheda");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("NumeroScheda",numeroScheda);
        soapReq.addProperty("SenderEmail",senderEmail);
        soapReq.addProperty("NomeAllegato",nomeAllegato);
        soapReq.addProperty("Allegato",allegato.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/UploadAllegatoScheda", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/UploadAllegatoScheda", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void CheckSenderEmailAsync(String senderEmail) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CheckSenderEmailAsync(senderEmail, null);
    }
    
    public void CheckSenderEmailAsync(final String senderEmail,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return CheckSenderEmail(senderEmail, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CheckSenderEmail", result);
                }
            }
        }.execute();
    }
    
    public boolean CheckSenderEmail(String senderEmail){
        return CheckSenderEmail(senderEmail, null);
    }
    
    public boolean CheckSenderEmail(String senderEmail,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","CheckSenderEmail");
        soapReq.addProperty("SenderEmail",senderEmail);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/CheckSenderEmail", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/CheckSenderEmail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void GetSchedaByNumeroAsync(String numScheda,String username,String password) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSchedaByNumeroAsync(numScheda, username, password, null);
    }
    
    public void GetSchedaByNumeroAsync(final String numScheda,final String username,final String password,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Message>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Message doInBackground(Void... params) {
                return GetSchedaByNumero(numScheda, username, password, headers);
            }
            @Override

            protected void onPostExecute(Message result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSchedaByNumero", result);
                }
            }
        }.execute();
    }
    
    public Message GetSchedaByNumero(String numScheda,String username,String password){
        return GetSchedaByNumero(numScheda, username, password, null);
    }
    
    public Message GetSchedaByNumero(String numScheda,String username,String password,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","GetSchedaByNumero");
        soapReq.addProperty("NumScheda",numScheda);
        soapReq.addProperty("Username",username);
        soapReq.addProperty("Password",password);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/GetSchedaByNumero", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/GetSchedaByNumero", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Message resultVariable =  new Message (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void SaveFotoInoltrateServerAsync(InfoFotoInoltrate fotoInoltrate) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveFotoInoltrateServerAsync(fotoInoltrate, null);
    }
    
    public void SaveFotoInoltrateServerAsync(final InfoFotoInoltrate fotoInoltrate,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Message>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Message doInBackground(Void... params) {
                return SaveFotoInoltrateServer(fotoInoltrate, headers);
            }
            @Override
            protected void onPostExecute(Message result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SaveFotoInoltrateServer", result);
                }
            }
        }.execute();
    }
    
    public Message SaveFotoInoltrateServer(InfoFotoInoltrate fotoInoltrate){
        return SaveFotoInoltrateServer(fotoInoltrate, null);
    }
    
    public Message SaveFotoInoltrateServer(InfoFotoInoltrate fotoInoltrate,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","SaveFotoInoltrateServer");
        soapEnvelope.addMapping("http://primis.bravservices.it/","fotoInoltrate",new InfoFotoInoltrate().getClass());
        soapReq.addProperty("fotoInoltrate",fotoInoltrate);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/SaveFotoInoltrateServer", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/SaveFotoInoltrateServer", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Message resultVariable =  new Message (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void SaveFotoInoltratePicsAsync(FotoInoltrata fotoInoltrata) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveFotoInoltratePicsAsync(fotoInoltrata, null);
    }

    public void SaveFotoInoltratePicsAsync(final FotoInoltrata fotoInoltrata,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, Message>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Message doInBackground(Void... params) {
                return SaveFotoInoltratePics(fotoInoltrata, headers);
            }
            @Override
            protected void onPostExecute(Message result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SaveFotoInoltratePics", result);
                }
            }
        }.execute();
    }

    public Message SaveFotoInoltratePics(FotoInoltrata fotoInoltrata){
        return SaveFotoInoltratePics(fotoInoltrata, null);
    }

    public Message SaveFotoInoltratePics(FotoInoltrata fotoInoltrata,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","SaveFotoInoltratePics");
        soapEnvelope.addMapping("http://primis.bravservices.it/","fotoInoltrata",new FotoInoltrata().getClass());
        soapReq.addProperty("fotoInoltrata",fotoInoltrata);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/SaveFotoInoltratePics", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/SaveFotoInoltratePics", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Message resultVariable =  new Message (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetSchede_XMLAsync(String deviceId,String matricolaOperatore) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSchede_XMLAsync(deviceId, matricolaOperatore, null);
    }
    
    public void GetSchede_XMLAsync(final String deviceId,final String matricolaOperatore,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetSchede_XML(deviceId, matricolaOperatore, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSchede_XML", result);
                }
            }
        }.execute();
    }
    
    public String GetSchede_XML(String deviceId,String matricolaOperatore){
        return GetSchede_XML(deviceId, matricolaOperatore, null);
    }
    
    public String GetSchede_XML(String deviceId,String matricolaOperatore,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","GetSchede_XML");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("MatricolaOperatore",matricolaOperatore);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/GetSchede_XML", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/GetSchede_XML", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetSchedeAsync(String deviceId,String matricolaOperatore) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSchedeAsync(deviceId, matricolaOperatore, null);
    }
    
    public void GetSchedeAsync(final String deviceId,final String matricolaOperatore,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                GetSchede(deviceId, matricolaOperatore, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSchede", result);
                }
            }
        }.execute();
    }
    
    public void GetSchede(String deviceId,String matricolaOperatore){
        GetSchede(deviceId, matricolaOperatore, null);
    }
    
    public void GetSchede(String deviceId,String matricolaOperatore,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","GetSchede");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("MatricolaOperatore",matricolaOperatore);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/GetSchede", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/GetSchede", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void AperturaSchedaAsync(String deviceId,String matricolaOperatore,String descrizioneOperatore,String numeroScheda,String dataApertura) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AperturaSchedaAsync(deviceId, matricolaOperatore, descrizioneOperatore, numeroScheda, dataApertura, null);
    }
    
    public void AperturaSchedaAsync(final String deviceId,final String matricolaOperatore,final String descrizioneOperatore,final String numeroScheda,final String dataApertura,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return AperturaScheda(deviceId, matricolaOperatore, descrizioneOperatore, numeroScheda, dataApertura, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AperturaScheda", result);
                }
            }
        }.execute();
    }
    
    public boolean AperturaScheda(String deviceId,String matricolaOperatore,String descrizioneOperatore,String numeroScheda,String dataApertura){
        return AperturaScheda(deviceId, matricolaOperatore, descrizioneOperatore, numeroScheda, dataApertura, null);
    }
    
    public boolean AperturaScheda(String deviceId,String matricolaOperatore,String descrizioneOperatore,String numeroScheda,String dataApertura,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","AperturaScheda");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("MatricolaOperatore",matricolaOperatore);
        soapReq.addProperty("DescrizioneOperatore",descrizioneOperatore);
        soapReq.addProperty("NumeroScheda",numeroScheda);
        soapReq.addProperty("DataApertura",dataApertura);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/AperturaScheda", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/AperturaScheda", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void SaveSchede_XMLAsync(String deviceId,String matricolaOperatore,String xmlData) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveSchede_XMLAsync(deviceId, matricolaOperatore, xmlData, null);
    }
    
    public void SaveSchede_XMLAsync(final String deviceId,final String matricolaOperatore,final String xmlData,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return SaveSchede_XML(deviceId, matricolaOperatore, xmlData, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SaveSchede_XML", result);
                }
            }
        }.execute();
    }
    
    public boolean SaveSchede_XML(String deviceId,String matricolaOperatore,String xmlData){
        return SaveSchede_XML(deviceId, matricolaOperatore, xmlData, null);
    }
    
    public boolean SaveSchede_XML(String deviceId,String matricolaOperatore,String xmlData,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","SaveSchede_XML");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("MatricolaOperatore",matricolaOperatore);
        soapReq.addProperty("xmlData",xmlData);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/SaveSchede_XML", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/SaveSchede_XML", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void SaveSchedeAsync(String deviceId,String matricolaOperatore) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveSchedeAsync(deviceId, matricolaOperatore, null);
    }
    
    public void SaveSchedeAsync(final String deviceId,final String matricolaOperatore,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return SaveSchede(deviceId, matricolaOperatore, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SaveSchede", result);
                }
            }
        }.execute();
    }
    
    public boolean SaveSchede(String deviceId,String matricolaOperatore){
        return SaveSchede(deviceId, matricolaOperatore, null);
    }
    
    public boolean SaveSchede(String deviceId,String matricolaOperatore,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","SaveSchede");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("MatricolaOperatore",matricolaOperatore);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/SaveSchede", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/SaveSchede", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void SaveRecords_XMLAsync(String deviceId,String xmlData,String tableName) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveRecords_XMLAsync(deviceId, xmlData, tableName, null);
    }
    
    public void SaveRecords_XMLAsync(final String deviceId,final String xmlData,final String tableName,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return SaveRecords_XML(deviceId, xmlData, tableName, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SaveRecords_XML", result);
                }
            }
        }.execute();
    }
    
    public boolean SaveRecords_XML(String deviceId,String xmlData,String tableName){
        return SaveRecords_XML(deviceId, xmlData, tableName, null);
    }
    
    public boolean SaveRecords_XML(String deviceId,String xmlData,String tableName,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","SaveRecords_XML");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("xmlData",xmlData);
        soapReq.addProperty("tableName",tableName);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/SaveRecords_XML", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/SaveRecords_XML", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void SaveRecordsAsync(String deviceId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveRecordsAsync(deviceId, null);
    }
    
    public void SaveRecordsAsync(final String deviceId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return SaveRecords(deviceId, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SaveRecords", result);
                }
            }
        }.execute();
    }
    
    public boolean SaveRecords(String deviceId){
        return SaveRecords(deviceId, null);
    }
    
    public boolean SaveRecords(String deviceId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","SaveRecords");
        soapReq.addProperty("DeviceId",deviceId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/SaveRecords", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/SaveRecords", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void SaveRecords2Async(String deviceId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveRecords2Async(deviceId, null);
    }
    
    public void SaveRecords2Async(final String deviceId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return SaveRecords2(deviceId, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SaveRecords2", result);
                }
            }
        }.execute();
    }
    
    public boolean SaveRecords2(String deviceId){
        return SaveRecords2(deviceId, null);
    }
    
    public boolean SaveRecords2(String deviceId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","SaveRecords2");
        soapReq.addProperty("DeviceId",deviceId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/SaveRecords2", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/SaveRecords2", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void GetServerDateTimeAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetServerDateTimeAsync(null);
    }
    
    public void GetServerDateTimeAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetServerDateTime(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetServerDateTime", result);
                }
            }
        }.execute();
    }
    
    public String GetServerDateTime(){
        return GetServerDateTime(null);
    }
    
    public String GetServerDateTime(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","GetServerDateTime");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/GetServerDateTime", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/GetServerDateTime", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void UpdateTablesAsync(String deviceId,VectorString nomeTabelle,VectorString dateSync) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateTablesAsync(deviceId, nomeTabelle, dateSync, null);
    }
    
    public void UpdateTablesAsync(final String deviceId,final VectorString nomeTabelle,final VectorString dateSync,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorByte>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorByte doInBackground(Void... params) {
                return UpdateTables(deviceId, nomeTabelle, dateSync, headers);
            }
            @Override
            protected void onPostExecute(VectorByte result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateTables", result);
                }
            }
        }.execute();
    }
    
    public VectorByte UpdateTables(String deviceId,VectorString nomeTabelle,VectorString dateSync){
        return UpdateTables(deviceId, nomeTabelle, dateSync, null);
    }
    
    public VectorByte UpdateTables(String deviceId,VectorString nomeTabelle,VectorString dateSync,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://primis.bravservices.it/","UpdateTables");
        soapReq.addProperty("DeviceId",deviceId);
        soapReq.addProperty("NomeTabelle",nomeTabelle);
        soapReq.addProperty("DateSync",dateSync);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://primis.bravservices.it/UpdateTables", soapEnvelope,headers);
            }else{
                httpTransport.call("http://primis.bravservices.it/UpdateTables", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapPrimitive j = (SoapPrimitive)obj;
                    VectorByte resultVariable = new VectorByte(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
